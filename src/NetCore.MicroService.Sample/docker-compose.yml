version: '3.4' #Compose文件版本
services: #服务
    auth: #定义"auth"服务 对应的是鉴权中心项目
        build: #构建
            context: . #构建上下文（目录）
            dockerfile: ./IDS4.AuthCenter/Dockerfile #Dockerfile文件目录
        ports: #端口
            - '5001:5001' #容器外部5001 容器内部5001
        environment: #环境变量
            - ASPNETCORE_URLS=http://+:5001 #程序在容器内部http://+:5001运行 也可以写成http://0.0.0.0:5001
        networks: #容器网络
            - my-net #自定义网络my-net

    web: #定义"web"服务 对应的web客户端项目
        build: 
            context: .
            dockerfile: ./WebMVC/Dockerfile
        ports: 
            - '7146:7146'
        environment: 
            - ASPNETCORE_URLS=http://+:7146
        networks: 
            - my-net
        depends_on: #"web"服务依赖于"auth"服务和"apigateway"服务，此服务会在依赖服务之后执行
            - auth
            - apigateway

    apigateway: #定义"apigateway"服务 对应的网关项目
        build: 
            context: .
            dockerfile: ./OcelotApiGetway/Dockerfile
        ports: 
            - '9000:9000'
        environment: 
            - ASPNETCORE_URLS=http://+:9000
        networks:
            - my-net
        depends_on: 
            - orderapi1
            - orderapi2
            - orderapi3
            - productapi1
            - productapi2
            - productapi3

    productapi1: #定义"productapi1"服务 对应的产品服务项目
        image: productapi #指定镜像名称，如果不指定 默认是：netcoremicroservicedemo_productapi1，因为下面要用到所以指定一下
        build: 
            context: .
            dockerfile: ./ProductApi/Dockerfile
        ports: 
            - '8001:8001'
        environment: 
            - ASPNETCORE_URLS=http://+:8001
            - ConsulSetting:ServiceIP=productapi1 #程序参数
            - ConsulSetting:ServicePort=8001 #程序参数
        networks: 
            - my-net
        depends_on: 
            - consul
            - postgres
            - rabbitmq
    productapi2:
        image: productapi #指定镜像名称为productapi，productapi1服务中已经构建了productapi镜像，所以不用重复构建
        ports: 
            - '8002:8002'
        environment: 
            - ASPNETCORE_URLS=http://+:8002
            - ConsulSetting:ServiceIP=productapi2
            - ConsulSetting:ServicePort=8002
        networks: 
            - my-net
        depends_on: 
            - productapi1
    productapi3:
        image: productapi
        ports: 
            - '8003:8003'
        environment: 
            - ASPNETCORE_URLS=http://+:8003
            - ConsulSetting:ServiceIP=productapi3 
            - ConsulSetting:ServicePort=8003
        networks: 
            - my-net
        depends_on: 
            - productapi1

    orderapi1:
        image: orderapi
        build: 
            context: .
            dockerfile: ./OrderApi/Dockerfile
        ports: 
            - '8004:8004'
        environment: 
            - ASPNETCORE_URLS=http://+:8004
            - ConsulSetting:ServiceIP=orderapi1
            - ConsulSetting:ServicePort=8004
        networks: 
            - my-net
        depends_on: 
            - consul
            - postgres
            - rabbitmq
    orderapi2:
        image: orderapi
        ports: 
            - '8005:8005'
        environment: 
            - ASPNETCORE_URLS=http://+:8005
            - ConsulSetting:ServiceIP=orderapi2
            - ConsulSetting:ServicePort=8005
        networks: 
            - my-net
        depends_on: 
            - orderapi1
    orderapi3:
        image: orderapi
        ports: 
            - '8006:8006'
        environment: 
            - ASPNETCORE_URLS=http://+:8006
            - ConsulSetting:ServiceIP=orderapi3
            - ConsulSetting:ServicePort=8006
        networks: 
            - my-net
        depends_on: 
            - orderapi1

    consul:
        image: consul #指定镜像名称为consul，本地如果没有consul镜像，会从docker远程仓库拉取
        ports: 
            - '8500:8500'
        networks: 
            - my-net

    postgres:
        image: postgres
        environment: 
            POSTGRES_PASSWORD: foo
        networks: 
            - my-net

    rabbitmq:
        image: rabbitmq
        networks: 
            - my-net

networks: #定义容器网络
    my-net: #my-net网络
        driver: bridge #网络模式为bridge
